{"version":3,"sources":["components/Navbar.js","components/FormElements/Button.js","components/Dfa.js","components/Nfa.js","components/Input.js","components/Simulation.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","type","id","Button","size","inverse","danger","success","children","to","exact","onClick","disabled","Dfa","n","dfa","length","m","dotStr","header","push","temp","inputSymbol","map","symbol","body","i","jsx","j","console","log","Table","striped","bordered","hover","Graphviz","dot","Nfa","find_transition","nfa","col","src","closure","hash_of_states","state_map","Array","fill","state_parse","split","parsed_nfa","y","temp1","parsed_closure","ans","slice","dfs","graph","visited","x","Map","states","val","s","reachable_state","reachable_states","find_closure","clos","store_closure","start","q","seen","Set","add","front","replaceAll","shift","option","has","nfa_to_dfa","Input","useState","final","setFinal","input","setNfa","row","arr","document","getElementById","value","text","Simulation","transition","setTransition","setSymbol","setStates","onSubmit","event","preventDefault","placeholder","symbols","inputStates","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c2daba3b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = props => {\r\n    return (<>\r\n        <nav className=\"navbar navbar-expand-lg navbar navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">Nepilson</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">NFA TO DFA</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}  ${props.success && 'button-success'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'} ${props.success && 'button-success'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}  ${props.success && 'button-success'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","\r\nimport React from \"react\";\r\nimport { Table } from 'react-bootstrap';\r\nimport './Dfa.css';\r\nimport { Graphviz } from 'graphviz-react';\r\nconst Dfa = props => {\r\n    let n = props.dfa.length;\r\n    let m = props.dfa[0].length;\r\n    let dotStr = \"digraph fsm {\\n\";\r\n    dotStr += \"rankdir=LR;\\n\";\r\n    dotStr += 'size=\"8,5\";\\n';\r\n    dotStr += \"node [shape = doublecircle]; \" + props.dfa[n - 1][m - 1] + \";\\n\";\r\n    dotStr += \"node [shape = point]; INITIAL_STATE\\n\";\r\n    dotStr += \"node [shape = circle];\\n\";\r\n    dotStr += \"INITIAL_STATE -> \" + props.dfa[0][0] + \";\\n\";\r\n\r\n    let header = [];\r\n    header.push(<th key=\"State\">States</th>)\r\n    let temp = props.inputSymbol.map((symbol) => {\r\n        return <th key={symbol + 999}>{symbol}</th>\r\n    })\r\n    header = [...header, ...temp];\r\n    let body = [];\r\n    for (let i = 0; i < props.dfa.length; i++) {\r\n        let jsx = [];\r\n        for (let j = 0; j < props.dfa[0].length; j++) {\r\n            jsx.push(<td key={`dfa${(i + 1) * (j + 1)}`}>{props.dfa[i][j]}</td>)\r\n            if (j > 0 && props.dfa[i][j] !== \"-\") {\r\n                dotStr +=\r\n                    \"\" +\r\n                    props.dfa[i][0] +\r\n                    \" -> \" +\r\n                    props.dfa[i][j] +\r\n                    \" [label=\" +\r\n                    props.inputSymbol[j - 1] +\r\n                    \"];\\n\";\r\n            }\r\n        }\r\n        body.push(<tr key={i + 1}>{jsx}</tr>)\r\n    }\r\n    dotStr += \"}\";\r\n    console.log(dotStr);\r\n    return <div className=\"dfa-content\">\r\n        <h1>DFA TRANSION TABLE:</h1>\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                    {header}\r\n\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {body}\r\n            </tbody>\r\n        </Table>\r\n        <h1>DFA TRANSION DIAGRAM:</h1>\r\n        <Graphviz dot={`${dotStr}`} />\r\n    </div>\r\n}\r\n\r\nexport default Dfa;","import React from 'react'\r\nimport Dfa from './Dfa';\r\nconst Nfa = (props) => {\r\n    const dfa = [];\r\n    const find_transition = (nfa, col, src, closure, hash_of_states, state_map) => {\r\n\r\n        let n = nfa.length;\r\n        let temp = new Array(n).fill(false);\r\n        let state_parse = src.split(\",\");\r\n        for (const x of state_parse) {\r\n            let parsed_nfa = nfa[hash_of_states[x]][col].split(\",\");\r\n            for (const y of parsed_nfa) {\r\n                if (y !== \"-\") {\r\n                    temp[hash_of_states[y]] = true;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        let temp1 = new Array(n).fill(false);\r\n        for (let i = 0; i < n; i++) {\r\n            if (temp[i]) {\r\n                let parsed_closure = closure[state_map[i]].split(\",\");\r\n                for (const y of parsed_closure) {\r\n                    temp1[hash_of_states[y]] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        let ans = \"\";\r\n        for (let i = 0; i < n; i++) {\r\n            if (temp1[i]) {\r\n                ans += state_map[i] + \",\";\r\n            }\r\n        }\r\n        return ans.slice(0, -1);\r\n    }\r\n    const nfa_to_dfa = (closure, nfa, start, hash_of_states, state_map) => {\r\n        const q = [];\r\n        q.push(start);\r\n        let seen = new Set();\r\n        seen.add(start)\r\n        let i = 0;\r\n        while (q.length !== 0) {\r\n            dfa[i] = [];\r\n            let front = q[0];\r\n            dfa[i].push(front.replaceAll(\",\", \"\"));\r\n            q.shift(1);\r\n            for (let j = 0; j < nfa[0].length - 1; j++) {\r\n\r\n                let option = find_transition(nfa, j, front, closure, hash_of_states, state_map);\r\n                if (!option.length)\r\n                    dfa[i].push(\"-\");\r\n                else\r\n                    dfa[i].push(option.replaceAll(\",\", \"\"));\r\n                if (!seen.has(option) && option.length) {\r\n                    q.push(option);\r\n                    seen.add(option);\r\n                }\r\n            }\r\n            i++;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const dfs = (graph, src, visited) => {\r\n        //DFS to find all reachable node from given node\r\n        visited[src] = true;\r\n        for (const x of graph[src]) {\r\n            if (!visited[x])\r\n                dfs(graph, x, visited);\r\n\r\n        }\r\n        return;\r\n    }\r\n    const find_closure = (graph, reachable_states, n) => {\r\n        for (let i = 0; i < n; i++) { //n=states\r\n            const visited = new Array(n).fill(false);\r\n\r\n            dfs(graph, i, visited);\r\n            reachable_states[i] = [];\r\n\r\n            for (let j = 0; j < n; j++) {\r\n\r\n\r\n                if (visited[j])\r\n                    reachable_states[i].push(j);\r\n            }\r\n        }\r\n\r\n    }\r\n    const store_closure = (reachable_states, state_map, closure) => {\r\n\r\n\r\n        for (let i = 0; i < reachable_states.length; i++) {\r\n\r\n            let clos = \"\";\r\n            for (const x of reachable_states[i]) {\r\n                clos += state_map[x] + \",\";\r\n            }\r\n            closure[state_map[i]] = clos.slice(0, -1);\r\n\r\n        }\r\n    }\r\n    const closure = (nfa, hash_of_states, state_map) => {\r\n        const states = nfa.length;\r\n        const inputSymbol = nfa[0].length;\r\n        const graph = [];\r\n        ///Graph logic\r\n        for (let i = 0; i < states; i++) {\r\n            graph[i] = [];\r\n            let s = \"\";\r\n            for (let j = 0; j < nfa[i][inputSymbol - 1].length; j++) {\r\n\r\n                let x = nfa[i][inputSymbol - 1][j];\r\n                if (x === \",\") {\r\n                    graph[i].push(hash_of_states[s]);\r\n\r\n                    s = \"\";\r\n                }\r\n                else if (x === \"-\") {\r\n                    // cout << \"inside continue\\n\";\r\n\r\n                    continue;\r\n                }\r\n                else\r\n                    s += x;\r\n            }\r\n            if (s.length !== 0)\r\n                graph[i].push(hash_of_states[s]);\r\n        }\r\n        const reachable_state = [];\r\n        const closure = new Map();\r\n        find_closure(graph, reachable_state, states);\r\n        store_closure(reachable_state, state_map, closure);\r\n\r\n        nfa_to_dfa(closure, nfa, closure[state_map[0]], hash_of_states, state_map);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const hash_of_states = new Map();\r\n    props.states.map((val, i) => {\r\n        return hash_of_states[val] = i;\r\n    })\r\n\r\n\r\n\r\n\r\n    closure(props.nfa, hash_of_states, props.states);\r\n    return (\r\n        <div>\r\n            <Dfa dfa={dfa} inputSymbol={props.inputSymbol} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nfa;\r\n","\r\nimport React, { useState } from 'react';\r\nimport './Input.css'\r\nimport { Table } from 'react-bootstrap';\r\nimport Button from './FormElements/Button';\r\nimport Nfa from './Nfa';\r\nconst Input = (props) => {\r\n    const [final, setFinal] = useState(false)\r\n    const input = [];\r\n    const [nfa, setNfa] = useState([]);\r\n\r\n    let header = [];\r\n    header.push(<th key=\"States\">States</th>)\r\n    let temp = props.inputSymbol.map((symbol) => {\r\n\r\n        return <th key={symbol}>{symbol}</th>\r\n    })\r\n    header = [...header, ...temp];\r\n\r\n    header.push(<th key={\"epilson\"} >Epilson</ th>)\r\n    for (let i = 0; i < props.row; i++) {\r\n        let jsx = [];\r\n        for (let j = 0; j < props.col + 2; j++) {\r\n            if (j === 0)\r\n                jsx.push(<td key={(i + 1) * (j + 1)}>{props.states[i]}</td>)\r\n            else\r\n                jsx.push(<td key={(i + 1) * (j + 1)}><input id={`row${i}col${j}`}></input></td>)\r\n        }\r\n        input.push(<tr key={i + 1}>{jsx}</tr>)\r\n    }\r\n\r\n    const fetchInput = () => {\r\n        let arr = [];\r\n        for (let i = 0; i < props.row; i++) {\r\n            const temp = [];\r\n            for (let j = 1; j < props.col + 2; j++) {\r\n                temp.push(document.getElementById(`row${i}col${j}`).value);\r\n            }\r\n            arr.push(temp);\r\n        }\r\n        setNfa(arr);\r\n        setFinal(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"table-content\">\r\n                <h1>NFA TRANSITION TABLE</h1>\r\n                <Table striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            {header}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {input}\r\n                    </tbody>\r\n                </Table>\r\n\r\n            </div>\r\n            <div className=\"mid-button\">\r\n                <Button inverse onClick={fetchInput} >Convert To DFA</Button>\r\n            </div>\r\n            <div className=\"dfa-container\">\r\n                {final && <Nfa text=\"hello\" inputSymbol={[...props.inputSymbol]} states={props.states} nfa={nfa} />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { useState } from \"react\";\r\nimport Button from './FormElements/Button'\r\nimport './Simulation.css'\r\nimport Input from './Input'\r\n// import Card from './UIElements/Card'\r\nconst Simulation = props => {\r\n    const [transition, setTransition] = useState(false);\r\n    const [inputSymbol, setSymbol] = useState([])\r\n    const [states, setStates] = useState([]);\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    const getInput = (event) => {\r\n\r\n\r\n        let symbols = [...document.getElementById('inputSymbol').value.split(',')] ////destructing\r\n        setSymbol(symbols);\r\n        let inputStates = document.getElementById('states').value.split(',');\r\n        setStates(inputStates);\r\n        if (symbols.length > 1 && inputStates.length > 1) {\r\n\r\n            setTransition(true);\r\n        }\r\n    }\r\n    const reset = () => {\r\n        setTransition(false);\r\n        setSymbol([]);\r\n        setStates([]);\r\n    }\r\n\r\n    return (<>\r\n        <form className=\"form-holder\" onSubmit={onSubmitHandler}>\r\n            <label >Enter States </label>\r\n            <input type=\"text\" id=\"states\" placeholder=\"Enter States in CSV format\" ></input>\r\n            <label>Enter Input Symbols</label>\r\n            <input type=\"text\" id=\"inputSymbol\" placeholder=\"Enter Symbol In CSV form\"></input>\r\n            <div className=\"Button-content\">\r\n                <Button success onClick={getInput}>Next</Button>\r\n                <Button danger onClick={reset} >Reset</Button>\r\n            </div>\r\n        </form>\r\n\r\n        {transition && <Input row={states.length} col={inputSymbol.length} inputSymbol={inputSymbol} states={states} />}\r\n\r\n    </>);\r\n}\r\n\r\nexport default Simulation;","// \nimport Navbar from './components/Navbar';\nimport Simulation from './components/Simulation';\n\nimport './App.css'\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Simulation></Simulation>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}